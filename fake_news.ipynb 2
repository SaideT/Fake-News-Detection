{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import nltk\n",
    "import string\n",
    "import re\n",
    "\n",
    "#from wordcloud import WordCloud\n",
    "import matplotlib.pyplot as plt\n",
    "from string import punctuation\n",
    "from bs4 import BeautifulSoup\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix, f1_score\n",
    "import seaborn as sns\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "\n",
    "\n",
    "from gensim.test.utils import datapath, get_tmpfile\n",
    "from gensim.models import KeyedVectors\n",
    "from gensim.scripts.glove2word2vec import glove2word2vec\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.naive_bayes import MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake = pd.DataFrame(pd.read_excel('/Users/luanyang/Downloads/stat software/final project/politics_fake2016.xlsx'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>TRUMP DITCHES PRESS To Make “Last Minute” Surp...</td>\n",
       "      <td>President-elect Donald Trump played a round of...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>COUNTDOWN TICKER: Obama Leaves Office In…5,4,3...</td>\n",
       "      <td>(function(){ var s=document.createElement('scr...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>BOOM! TOMI LAHREN’S Top Tips For Liberals In 2...</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>YES, OBAMA…There Is A Magic Wand! [Video]</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>HA! DONALD TRUMP’S Unusual New Year’s Tweet To...</td>\n",
       "      <td>President-elect Donald Trump is throwing a pri...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  \\\n",
       "0  TRUMP DITCHES PRESS To Make “Last Minute” Surp...   \n",
       "1  COUNTDOWN TICKER: Obama Leaves Office In…5,4,3...   \n",
       "2  BOOM! TOMI LAHREN’S Top Tips For Liberals In 2...   \n",
       "3          YES, OBAMA…There Is A Magic Wand! [Video]   \n",
       "4  HA! DONALD TRUMP’S Unusual New Year’s Tweet To...   \n",
       "\n",
       "                                                text   subject       date  \n",
       "0  President-elect Donald Trump played a round of...  politics 2016-12-31  \n",
       "1  (function(){ var s=document.createElement('scr...  politics 2016-12-31  \n",
       "2                                                     politics 2016-12-31  \n",
       "3                                                     politics 2016-12-31  \n",
       "4  President-elect Donald Trump is throwing a pri...  politics 2016-12-31  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fake.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "fake['label']='0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "true = pd.DataFrame(pd.read_excel('politics_true2016.xlsx'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Mormon Tabernacle Choir member resigns rather ...</td>\n",
       "      <td>(Reuters) - A member of the Mormon Tabernacle ...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Obama to meet lawmakers in attempt to protect ...</td>\n",
       "      <td>WASHINGTON (Reuters) - President Barack Obama ...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Lockheed Martin wins $450 million Pentagon con...</td>\n",
       "      <td>WASHINGTON (Reuters) - Lockheed Martin Corp ha...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Trump fans' 'Deploraball' party shows rift in ...</td>\n",
       "      <td>NEW YORK (Reuters) - Supporters of U.S. Presid...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Obama sanctions Russia for intervening in 2016...</td>\n",
       "      <td>HONOLULU (Reuters) - President Barack Obama on...</td>\n",
       "      <td>politicsNews</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  \\\n",
       "0  Mormon Tabernacle Choir member resigns rather ...   \n",
       "1  Obama to meet lawmakers in attempt to protect ...   \n",
       "2  Lockheed Martin wins $450 million Pentagon con...   \n",
       "3  Trump fans' 'Deploraball' party shows rift in ...   \n",
       "4  Obama sanctions Russia for intervening in 2016...   \n",
       "\n",
       "                                                text       subject  \\\n",
       "0  (Reuters) - A member of the Mormon Tabernacle ...  politicsNews   \n",
       "1  WASHINGTON (Reuters) - President Barack Obama ...  politicsNews   \n",
       "2  WASHINGTON (Reuters) - Lockheed Martin Corp ha...  politicsNews   \n",
       "3  NEW YORK (Reuters) - Supporters of U.S. Presid...  politicsNews   \n",
       "4  HONOLULU (Reuters) - President Barack Obama on...  politicsNews   \n",
       "\n",
       "                  date  \n",
       "0  2016-12-30 00:00:00  \n",
       "1  2016-12-30 00:00:00  \n",
       "2  2016-12-29 00:00:00  \n",
       "3  2016-12-29 00:00:00  \n",
       "4  2016-12-29 00:00:00  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "true.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "true['label']='1'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "news=fake.append(true)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>date</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>TRUMP DITCHES PRESS To Make “Last Minute” Surp...</td>\n",
       "      <td>President-elect Donald Trump played a round of...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>COUNTDOWN TICKER: Obama Leaves Office In…5,4,3...</td>\n",
       "      <td>(function(){ var s=document.createElement('scr...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>BOOM! TOMI LAHREN’S Top Tips For Liberals In 2...</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>YES, OBAMA…There Is A Magic Wand! [Video]</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>HA! DONALD TRUMP’S Unusual New Year’s Tweet To...</td>\n",
       "      <td>President-elect Donald Trump is throwing a pri...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  \\\n",
       "0  TRUMP DITCHES PRESS To Make “Last Minute” Surp...   \n",
       "1  COUNTDOWN TICKER: Obama Leaves Office In…5,4,3...   \n",
       "2  BOOM! TOMI LAHREN’S Top Tips For Liberals In 2...   \n",
       "3          YES, OBAMA…There Is A Magic Wand! [Video]   \n",
       "4  HA! DONALD TRUMP’S Unusual New Year’s Tweet To...   \n",
       "\n",
       "                                                text   subject  \\\n",
       "0  President-elect Donald Trump played a round of...  politics   \n",
       "1  (function(){ var s=document.createElement('scr...  politics   \n",
       "2                                                     politics   \n",
       "3                                                     politics   \n",
       "4  President-elect Donald Trump is throwing a pri...  politics   \n",
       "\n",
       "                  date label  \n",
       "0  2016-12-31 00:00:00     0  \n",
       "1  2016-12-31 00:00:00     0  \n",
       "2  2016-12-31 00:00:00     0  \n",
       "3  2016-12-31 00:00:00     0  \n",
       "4  2016-12-31 00:00:00     0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f81b2b9cb50>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_style(\"darkgrid\")\n",
    "sns.countplot(news.label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data cleaning\n",
    "\n",
    "stop = set(stopwords.words('english'))\n",
    "punctuation = list(string.punctuation)\n",
    "stop.update(punctuation)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def strip_html(text):\n",
    "    soup = BeautifulSoup(text,\"html.parser\")\n",
    "    return soup.get_text()\n",
    "\n",
    "#Removing the square brackets\n",
    "def remove_between_square_brackets(text):\n",
    "    return re.sub('\\[[^]]*\\]', '', text)\n",
    "\n",
    "# Removing URL's\n",
    "def remove_url(text):\n",
    "    return re.sub(r'http\\S+', '', text)\n",
    "\n",
    "#Removing the stopwords from text\n",
    "def remove_stopwords(text):\n",
    "    final_text = []\n",
    "    for i in text.split():\n",
    "        if i.strip().lower() not in stop:\n",
    "            final_text.append(i.strip().lower())\n",
    "    return \" \".join(final_text)\n",
    "\n",
    "#Removing punctuation\n",
    "def remove_punctuation(text):\n",
    "    pattern = '[’!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]+'\n",
    "    text = re.sub(pattern,'',text)\n",
    "    text.lstrip('\"')\n",
    "    return text\n",
    "\n",
    "#Removing the noisy text\n",
    "def denoise_text(text):\n",
    "    text = strip_html(text)\n",
    "    text = remove_between_square_brackets(text)\n",
    "    text = remove_url(text)\n",
    "    text = remove_stopwords(text)\n",
    "    text = remove_punctuation(text)\n",
    "\n",
    "    return text\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=IioEIUmawRo\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=31MRqr9ydUU\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=wYdX071Nlow\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=YeDU6dCR9tA\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=0cVugq2GbBk\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=CCr0qvehJIk\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=HXJZbPAf0sk\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?feature=player_embedded&v=JebHe3049aA\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=sWbYpIj7CQ8\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://youtu.be/7oOhwHG2Gb4\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=_FNt3ns_EGA\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://youtu.be/RTuxvWjH3a4\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=uQbAww5wajA\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://youtu.be/Ai5ayloRa-0\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://twitter.com/Rosie/status/800939338615824384\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://youtu.be/0J4xPRYbsLU\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://youtu.be/kKFQ5i9jXmA\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n",
      "/opt/anaconda3/lib/python3.7/site-packages/bs4/__init__.py:357: UserWarning: \"https://www.youtube.com/watch?v=1RVqTfIKGbU\" looks like a URL. Beautiful Soup is not an HTTP client. You should probably use an HTTP client like requests to get the document behind the URL, and feed that document to Beautiful Soup.\n",
      "  ' that document to Beautiful Soup.' % decoded_markup\n"
     ]
    }
   ],
   "source": [
    "#Apply function on review column\n",
    "news['text']=news['text'].apply(denoise_text)\n",
    "news['title']=news['title'].apply(denoise_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>text</th>\n",
       "      <th>subject</th>\n",
       "      <th>date</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>trump ditches press make “last minute” surpris...</td>\n",
       "      <td>presidentelect donald trump played round golf ...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>countdown ticker obama leaves office in…54321…</td>\n",
       "      <td>function var sdocumentcreateelementscriptssrcw...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>boom tomi lahrens top tips liberals 2017</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>yes obama…there magic wand</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>ha donald trumps unusual new years tweet “many...</td>\n",
       "      <td>presidentelect donald trump throwing private n...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>liberals see light huffpo columnist lets rip o...</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>breaking democrat makes shocking statement reg...</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-31 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>sheriff clarke destroys idiocy gun control dem...</td>\n",
       "      <td>usual milwaukee outspoken sheriff david clarke...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>putin pushes reset button america surprising move</td>\n",
       "      <td>chess match political wills putin coin well ob...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>clintons beg cash foundations ability peddle i...</td>\n",
       "      <td>bad darn russians presidentelect trump media i...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>boom charlie daniels nails obama democrats one...</td>\n",
       "      <td>obama low key past months even campaigned losi...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>bad news obama black lives matter terror group...</td>\n",
       "      <td>insatiable 247 news cycle bolstered cellphones...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>russia mocks sore loser obama trying destroy u...</td>\n",
       "      <td>presidentelect donald trump said thursday time...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>watch diamond silk rip john kerry israel comme...</td>\n",
       "      <td>diamondandsilk something say kerry obama stanc...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>awesome trump tweets two rules guide trump adm...</td>\n",
       "      <td>link instagram photo below</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>wheres hillary clinton spotted dining alone</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-30 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>trump announces two companies join “america fi...</td>\n",
       "      <td></td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>russias hysterical response obamas sanctions “...</td>\n",
       "      <td>russian response barack obama announcement exp...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>obama inciting second cold war 35 russian dipl...</td>\n",
       "      <td>reuters reportsthe united states expelled 35 r...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>hiv positive crack smoking liberal actor charl...</td>\n",
       "      <td>less one year ago charlie sheen exwife denise ...</td>\n",
       "      <td>politics</td>\n",
       "      <td>2016-12-29 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                title  \\\n",
       "0   trump ditches press make “last minute” surpris...   \n",
       "1      countdown ticker obama leaves office in…54321…   \n",
       "2            boom tomi lahrens top tips liberals 2017   \n",
       "3                          yes obama…there magic wand   \n",
       "4   ha donald trumps unusual new years tweet “many...   \n",
       "5   liberals see light huffpo columnist lets rip o...   \n",
       "6   breaking democrat makes shocking statement reg...   \n",
       "7   sheriff clarke destroys idiocy gun control dem...   \n",
       "8   putin pushes reset button america surprising move   \n",
       "9   clintons beg cash foundations ability peddle i...   \n",
       "10  boom charlie daniels nails obama democrats one...   \n",
       "11  bad news obama black lives matter terror group...   \n",
       "12  russia mocks sore loser obama trying destroy u...   \n",
       "13  watch diamond silk rip john kerry israel comme...   \n",
       "14  awesome trump tweets two rules guide trump adm...   \n",
       "15        wheres hillary clinton spotted dining alone   \n",
       "16  trump announces two companies join “america fi...   \n",
       "17  russias hysterical response obamas sanctions “...   \n",
       "18  obama inciting second cold war 35 russian dipl...   \n",
       "19  hiv positive crack smoking liberal actor charl...   \n",
       "\n",
       "                                                 text   subject  \\\n",
       "0   presidentelect donald trump played round golf ...  politics   \n",
       "1   function var sdocumentcreateelementscriptssrcw...  politics   \n",
       "2                                                      politics   \n",
       "3                                                      politics   \n",
       "4   presidentelect donald trump throwing private n...  politics   \n",
       "5                                                      politics   \n",
       "6                                                      politics   \n",
       "7   usual milwaukee outspoken sheriff david clarke...  politics   \n",
       "8   chess match political wills putin coin well ob...  politics   \n",
       "9   bad darn russians presidentelect trump media i...  politics   \n",
       "10  obama low key past months even campaigned losi...  politics   \n",
       "11  insatiable 247 news cycle bolstered cellphones...  politics   \n",
       "12  presidentelect donald trump said thursday time...  politics   \n",
       "13  diamondandsilk something say kerry obama stanc...  politics   \n",
       "14                         link instagram photo below  politics   \n",
       "15                                                     politics   \n",
       "16                                                     politics   \n",
       "17  russian response barack obama announcement exp...  politics   \n",
       "18  reuters reportsthe united states expelled 35 r...  politics   \n",
       "19  less one year ago charlie sheen exwife denise ...  politics   \n",
       "\n",
       "                   date label  \n",
       "0   2016-12-31 00:00:00     0  \n",
       "1   2016-12-31 00:00:00     0  \n",
       "2   2016-12-31 00:00:00     0  \n",
       "3   2016-12-31 00:00:00     0  \n",
       "4   2016-12-31 00:00:00     0  \n",
       "5   2016-12-31 00:00:00     0  \n",
       "6   2016-12-31 00:00:00     0  \n",
       "7   2016-12-30 00:00:00     0  \n",
       "8   2016-12-30 00:00:00     0  \n",
       "9   2016-12-30 00:00:00     0  \n",
       "10  2016-12-30 00:00:00     0  \n",
       "11  2016-12-30 00:00:00     0  \n",
       "12  2016-12-30 00:00:00     0  \n",
       "13  2016-12-30 00:00:00     0  \n",
       "14  2016-12-30 00:00:00     0  \n",
       "15  2016-12-30 00:00:00     0  \n",
       "16  2016-12-29 00:00:00     0  \n",
       "17  2016-12-29 00:00:00     0  \n",
       "18  2016-12-29 00:00:00     0  \n",
       "19  2016-12-29 00:00:00     0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "news.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'WordCloud' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-61970151f793>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mwc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mWordCloud\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_words\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m2000\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mwidth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1600\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mheight\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m800\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mstopwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSTOPWORDS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\" \"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnews\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnews\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcategory\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwc\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0minterpolation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'bilinear'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'WordCloud' is not defined"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1440x1440 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#wordcloud\n",
    "plt.figure(figsize = (20,20)) \n",
    "wc = WordCloud(max_words = 2000 , width = 1600 , height = 800 , stopwords = STOPWORDS).generate(\" \".join(news[news.category == 1].text))\n",
    "plt.imshow(wc , interpolation = 'bilinear')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0.98, 'Average word length in each text')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABH8AAAKSCAYAAABLIXfkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOzde7TVdZ3/8dfxgAEeEklykCIbDbyH2GQkVqCM5nghSSVdDKY4jZfWqJhSeSVTsjLxknZxsIsh6irLWmNCeImjVroCYY2IQ4WmjDgRJmByLt/fH67OT0M4Xs75oh8ej7/YZ+/92Z/9Pq7lZz357k1DVVVVAAAAACjSFpt6AwAAAAB0H/EHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AwBtAS0tLRo4cmUmTJm3qrbxh7LXXXvnjH/+43s9Hjx6dhQsXdstrHn/88Vm5cuWrep0TTzwx//M//9Mt+3klXuk+b7755txwww2v+XXuuuuuTJ8+/TU/HwDYdMQfAHgDmD17dnbeeecsWrQoS5cu3dTb2Ww1Nze/6ud861vfyk477dQNu+laDz74YP7617++5ucvXLgwzzzzTBfuCACoS49NvQEAIJk5c2YOPvjgDB48ON/5zncyderUTJ48ObvttluOP/74JMkPfvCD/PrXv87ll1+euXPn5pprrklLS0t69eqVs88+O3vttVeuvPLKzJ8/PytWrMjQoUMzZcqUnHfeefnTn/6Up59+OoMGDcrll1+et73tbXnooYdywQUXpKWlJYMHD86TTz6ZKVOmZJ999tng+i928sknZ9SoUTnyyCPz29/+NuPHj8+cOXPyzne+M1//+tezZs2anHbaaZk2bVruu+++NDY2Zs8998xnP/vZNDU1ZfTo0dlzzz3zyCOP5Iwzzsg222yTL3zhC2loaMgee+yR9vb2Tue2sTk88cQTefrpp/PEE09ku+22y5e//OW8/e1v3+D7vvXWW5MkEydOzDe/+c0kyaxZs3L++edn5cqVOfzww3P66aevt4fRo0dn+vTpWbt2bb72ta/lne98Zx599NG0trbmwgsvzN577/2K9/1///d/G/x9/f73v895552XlStXZosttshJJ52Ugw8++BXtc/bs2Zk7d26am5vTq1evHHvssbnmmmtyxx13pL29PYMGDcr555+frbfeOuPGjcsxxxyTY489NjfffHO++93v5txzz82NN96Ytra29O3b92XnAAC8gVUAwCb16KOPVrvttlu1cuXKasGCBdWee+5ZrVy5srrvvvuqQw45pONxH//4x6vm5ubq97//fXXIIYdUK1eurKqqqpYsWVLtu+++1Zo1a6orrriiOvDAA6uWlpaqqqrq+uuvr77xjW9UVVVV7e3t1aRJk6rrrruuamlpqT70oQ9Vd911V1VVVXXfffdVQ4cOre6///6Nrv9iP/rRj6pPf/rTVVVV1fTp06t99923uvHGG6uqqqpx48ZVCxYsqKZPn16deuqp1bp166q2trZqypQp1bnnnltVVVWNGjWquuqqq6qqqqrnn3+++uAHP1jde++9VVVV1W233VYNGTKkevzxx9eb16hRo6qHHnqo0znsv//+1bPPPltVVVV96lOfqqZPn77R911VVTVkyJDqT3/6U8frTJ06taqqqlqxYkW1++67V08++eQG93P//fdXu+yyS/Xf//3fVVVV1XXXXVcde+yx6z1+Y/ve0O+rqqpq7Nix1fe///2qqqrqySef7Hh/r3SfZ599dvXtb3+743d32mmndfx3cuONN1aTJk2qqqqqFi9eXL3//e+v7rrrruqDH/xgtXTp0qqqquqKK66oLrzwwvXWBQDe+Fz5AwCb2MyZMzNq1Khss8022WabbfKOd7wjN910U/7t3/4tzz//fBYuXJjevXtn5cqVGTFiRH7wgx9kxYoVOe644zrWaGhoyGOPPZYkGTZsWHr0eOF/8RMnTswDDzyQGTNm5A9/+EMeffTRvPe9782SJUuSJB/+8IeTJB/4wAfynve8J8kLH33a0Po777xzx89GjRqVSy65JK2trZk3b15OOumkNDc35yMf+UhWrlyZPfbYI1OnTs3pp5+enj17JkkmTJiQU045pWON973vfUmSJUuWpEePHhkxYkSS5JBDDsl555230bltbJ9J8v73vz9NTU1Jkl133TXPPPPMRt/3yznkkEOSJAMGDMi2226bP/3pTxk4cOAGH7/99ttnl1126XjNH/3oR69q3xv6fa1atSqLFy/OkUcemSQZOHBg5syZ85r3eeedd2bhwoUZN25ckqS9vT3PPfdckmTo0KE59dRT86lPfSrTpk3LP/7jP25wHQDgzUH8AYBNaO3atfnxj3+cLbfcMqNHj06SrF69Ot///vdz/PHH5+Mf/3h+/OMfp2fPnvn4xz+ehoaGtLe3Z8SIEbn88ss71lm+fHne/va3Z/bs2enTp0/Hz7/85S/noYceyrhx47LPPvuktbU1VVWlsbExVVW9ZC+NjY1JstH1X2zrrbfOLrvskjvvvDOrV6/O4Ycfnq9//euZM2dODjjggI69NjQ0dDynvb09LS0tHbdfvNe/38/fAtaGdDaHXr16dfy8oaGh0/f9cl68h7+tsTEv95qvZt8b+n39bR8vnuXvfve7bL/99q9pn+3t7Zk0aVKOOeaYJMm6dete8n0+jz76aLbddtssWLAgY8eO3ehaAMAbny98BoBN6Lbbbku/fv3yy1/+MnPnzs3cuXMzZ86crF27Nrfffns+9rGPZe7cufn5z3+eI444IkkyYsSINDc3d3wx9N13353DDjvsZb/Md968eZk4cWLGjh2bt73tbbn33nvT1taWHXfcMVtuuWXuueeeJMlDDz2UJUuWpKGh4VWtP2bMmFx22WUZMWJEmpqassMOO+Rb3/pW/vmf/zlJst9++2XmzJlpaWlJe3t7brjhhuy7777rrTN06NBUVZW77747SfKLX/yi0y8XfjX7/JuNve/khRDU2tq60dd9vTa27w39vpqamrLbbrt1fC/R8uXL84lPfCLPPvvsK37dF7+3kSNH5pZbbsnq1auTJNOnT89ZZ52VJLnjjjvyq1/9Kj/5yU/S3NzccYVRHbMBALqHK38AYBOaOXNmPvnJT77k6pO3vvWtmTBhQq6//voceuih2XXXXdPa2prtttsuSbLTTjtl6tSpOeOMMzquCrnmmmuy1VZbrbf+KaeckksvvTTTp09Pz549M3z48Dz22GPp0aNHrrzyypx//vm57LLLssMOO2TbbbdNr169XtX6BxxwQL7whS/kzDPPTPJCVLjhhhsyfPjwJMlJJ52UL33pSxk7dmxaW1uz55575txzz11vnZ49e+bqq6/OBRdckMsuuyy77LJL3va2t210dq9mn3+zsfedJAcddFAmTJiQK6+8cqOv/XpsbN8b+n0lyVe/+tVceOGF+d73vpeGhoZ88YtfzIABA17x637oQx/KtGnTkrzwz9M/9dRTOeqoo9LQ0JCBAwdm2rRpWb58ec4///xce+216d+/f6ZNm5ZTTjklu+++ez7wgQ/kzDPPzBe+8IWX/R0CAG9cDVVn1wUDAEX60pe+lBNOOCHbbrttli9fnsMPPzxz5szJW9/61k29tW61ub5vAGDz5cofANhMDRo0KMcdd1x69OiRqqpy0UUXbRYBZHN93wDA5suVPwAAAAAF84XPAAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBemzqDQCb3kUXXZTf/OY3SZKlS5dm0KBB6dWrV5Jk1qxZHX/uSuecc07Gjx+f3Xff/TU9/6qrrsrOO++cAw44oIt3BgBQj6FDh2bIkCHZYov//3fyu+++e774xS9u8Dk//OEP8/Of/zzf+MY3XvPrHn/88fnKV76S/v37v6bnv95zHFA/8QfIOeec0/Hn0aNH5ytf+Ur22GOPbn3Ne++9N0cfffRrfv6vfvWr7LTTTl24IwCA+n3nO995zRHmtWpubn5dz3+95zigfj72BXRq9913z3/8x3/kwAMPzMKFCzN06NCsXLmy4/4X3547d26OPPLIjB07NuPHj89vf/vb9db72te+lhUrVuTMM8/MggUL8uyzz2bKlCk54ogjcuihh+biiy9Oa2trli5dmn/6p3/Kww8/nCQ566yz8rnPfS433HBDFi1alEsvvTSzZ8+uZwgAADW65ZZbOs5Uo0aNyg9+8IP1HnP77bfngAMOyO9+97skyc0335wjjjgiY8eOzXHHHZelS5eu95zPfvazSZKJEydm+fLleeqpp3LKKad0nMOuvfbaJMn999+fffbZJ0899VTa29szYcKEXH311eud44A3B1f+AJ1qaWnJqFGjMn369I0+7g9/+EO+9rWv5bvf/W622WabPProo/nkJz+ZO+64I3369Ol43Omnn57bbrut4wqjz372s9ltt90ybdq0tLW1ZcqUKZkxY0ZOPPHEfOYzn8nZZ5+dCRMmZPHixbnpppvSq1ev3H777Tn22GMzZsyY7n77AADdZuLEiS/52Nd//ud/plevXrn55pvzzW9+M9tss03mz5+fT37ykznmmGM6HvfTn/401157bb73ve9l4MCB+fWvf51bb701N9xwQ3r37p158+bl1FNPzX/913+95PUuueSS/PCHP+y44uhf//Vfc9xxx2X06NF5/vnnc+KJJ2bw4ME5+OCDM378+Jxzzjl573vfmy233DInnXRStthii5ec44A3B/EHeEXe9773dfqY5ubmrFixIscdd1zHzxoaGvLYY49l55133uDz7rrrrixcuDC33HJLkuSvf/1rx31HHXVU5s2bl4suuig//vGPu+X7hwAANpUNfezr2muvzd13350//OEPWbx4cdauXdtx38KFC/PLX/4yn/vc5zJw4MAkL5ynli1blvHjx3c87i9/+UtWrVqVfv36vexrr127Nr/5zW/yzDPPdPwl39q1a7N48eIcfPDB+fSnP51jjjkmM2fOzG233faSSAW8uYg/wCvy4it3XmzdunUdf25vb8+IESNy+eWXd/xs+fLlefvb377Rtdvb2zN9+vTsuOOOSV44qDQ0NHSsv2zZsvTt2zcPP/xwdthhh9f5TgAA3tj+93//N0cffXSOOuqo7L333jnooINy5513dtzft2/ffPWrX81pp52Wj3zkI3nHO96R9vb2HH744fnMZz6T5IXz1YoVK7L11ltv8HXa29tTVVVuvPHG9O7dO0mycuXKvOUtb0mSPPvss3n66afT0NCQZcuW1f7dREDXkW6BV61///5ZuHBhkhcuOf6bESNGpLm5uePz5XfffXcOO+ywl1zJ8zeNjY1pbW1NkowcOTLXX399qqrKunXrctJJJ+X73/9+kuTSSy/Ne97znlx33XW56KKL8sQTT6z3fACAkixatCj9+/fPySefnJEjR3aEn7a2tiTJDjvskBEjRmTChAk5++yz097enpEjR+ZnP/tZVqxYkSSZOXNmJk6c+LLr/+0c1dTUlGHDhmXGjBlJXvgLuE984hP5xS9+kST5/Oc/n8MOOyyXXHJJzjzzzDz77LMveT7w5iH+AK/aOeeck6lTp+ZjH/tYli5dmgEDBiRJdtppp0ydOjVnnHFGDjvssEyfPj3XXHNNttpqq/XWGDNmTD7zmc9k3rx5+fznP5+1a9fm0EMPzaGHHpohQ4Zk0qRJueuuuzJ79uycd955GTp0aCZOnJjJkyentbU1o0ePzmWXXZYf/ehHdb99AIBute+++2a77bbLQQcdlI9+9KNZvnx5+vfvn2XLlr3kcf/+7/+e5557Lt/+9rczcuTInHjiiTn++ONz6KGH5qc//WmuuuqqjqupX+yggw7KhAkTsmTJknzlK1/JggULcuihh+bII4/MIYccksMOOyw33HBDli9fnlNPPTX77bdfRo4cmXPPPTfJS89xwJtDQ1VV1abeBAAAAADdw5U/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAAChYj7pfsL29PW1t3fMd042NDd22Nusz7/qZeb3Mu17mXa/unHfPno3dsi6vjzNYOcy7XuZdPzOvl3nXa1OdwWqPP21tVVatWtsta/fr16fb1mZ95l0/M6+XedfLvOvVnfMeMKBvt6zL6+MMVg7zrpd518/M62Xe9dpUZzAf+wIAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFe0XxZ8GCBZkwYcJ6P587d27GjRuXo48+OjfddFOXbw4AYHPmDAYAdIUenT3gW9/6Vn7yk5+kd+/eL/l5S0tLLrnkktxyyy3p3bt3PvGJT2TUqFEZMGBAt20WAGBz4QwGAHSVTuPP4MGDc+WVV+ass856yc+XLl2awYMHZ+utt06S7L333nnggQfy0Y9+dKPrNTY2pF+/Pq9jyxtbe4tuW5v1mXf9zLxe5l0v866Xeb/xOYOxIeZdL/Oun5nXy7zrtanm3Wn8OfDAA/PHP/5xvZ+vXr06ffv27bi91VZbZfXq1Z2+YFtblVWr1r7Kbb4y/fr16ba1WZ9518/M62Xe9TLvenXnvAcM6Nv5g+iUMxgbYt71Mu/6mXm9zLtem+oM9pq/8LmpqSlr1qzpuL1mzZqXHEQAAOh6zmAAwKv1muPPjjvumGXLlmXVqlVZt25dHnjggey1115duTcAAP6OMxgA8Gp1+rGvv3fbbbdl7dq1OfroozNlypSccMIJqaoq48aNy3bbbdcdewQA2Ow5gwEAr1VDVVVVnS/Y0tLm8+aFMO/6mXm9zLte5l0v3/mz+XEGK4d518u862fm9TLver3pvvMHAAAAgDc+8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUrNP4097envPOOy9HH310JkyYkGXLlr3k/uuuuy5HHHFExo0bl9mzZ3fbRgEANhfOXwBAV+rR2QPmzJmTdevWZdasWZk/f36mTZuWa665Jknyl7/8Jd/73vdyxx135LnnnsvYsWMzZsyYbt80AEDJnL8AgK7U6ZU/Dz74YPbbb78kybBhw7Jo0aKO+3r37p3tt98+zz33XJ577rk0NDR0304BADYTzl8AQFfq9Mqf1atXp6mpqeN2Y2NjWltb06PHC08dOHBg/uVf/iVtbW351Kc+1ekLNjY2pF+/Pq9jyxtbe4tuW5v1mXf9zLxe5l0v866Xeb+xdfX564U1nMFKYd71Mu/6mXm9zLtem2rencafpqamrFmzpuN2e3t7x8HjnnvuyYoVK/KLX/wiSXLCCSdk+PDh2XPPPTe4XltblVWr1r7efb+sfv36dNvarM+862fm9TLvepl3vbpz3gMG9O2WdTcnXX3+SpzBSmLe9TLv+pl5vcy7XpvqDNbpx76GDx+ee+65J0kyf/78DBkypOO+rbfeOr169cqWW26Zt7zlLenbt2/+8pe/dMGWAQA2X85fAEBX6vTKnzFjxqS5uTnjx49PVVW5+OKLM2PGjAwePDj7779/7r333hx11FHZYostMnz48Oy777517BsAoFjOXwBAV2qoqqqq8wVbWtpcclwI866fmdfLvOtl3vXysa/NjzNYOcy7XuZdPzOvl3nX6w37sS8AAAAA3rzEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYD06e0B7e3suuOCCPPLII9lyyy1z0UUX5V3velfH/XfffXeuvvrqJMmuu+6a888/Pw0NDd23YwCAwjl/AQBdqdMrf+bMmZN169Zl1qxZmTx5cqZNm9Zx3+rVq/PlL3851157bW666aYMGjQof/7zn7t1wwAApXP+AgC6UqdX/jz44IPZb7/9kiTDhg3LokWLOu777W9/myFDhuRLX/pSHn/88Rx55JHp37//RtdrbGxIv359Xue2N7T2Ft22Nusz7/qZeb3Mu17mXS/zfmPr6vNX4gxWEvOul3nXz8zrZd712lTz7jT+rF69Ok1NTR23Gxsb09ramh49euTPf/5zfvWrX+XWW29Nnz59cuyxx2bYsGF597vfvcH12tqqrFq1tmt2/3f69evTbWuzPvOun5nXy7zrZd716s55DxjQt1vW3Zx09fkrcQYriXnXy7zrZ+b1Mu96baozWKcf+2pqasqaNWs6bre3t6dHjxeaUb9+/bLHHntkwIAB2WqrrfK+970vDz/8cBdsGQBg8+X8BQB0pU7jz/Dhw3PPPfckSebPn58hQ4Z03Lf77rtnyZIlWblyZVpbW7NgwYLstNNO3bdbAIDNgPMXANCVOv3Y15gxY9Lc3Jzx48enqqpcfPHFmTFjRgYPHpz9998/kydPzqRJk5IkBx100EsOJwAAvHrOXwBAV2qoqqqq8wVbWtp83rwQ5l0/M6+XedfLvOvlO382P85g5TDvepl3/cy8XuZdrzfsd/4AAAAA8OYl/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/sET/CsAABP5SURBVAAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCiT8AAAAABRN/AAAAAAom/gAAAAAUTPwBAAAAKJj4AwAAAFAw8QcAAACgYOIPAAAAQMHEHwAAAICCdRp/2tvbc9555+Xoo4/OhAkTsmzZspd9zKRJkzJz5sxu2SQAwObE+QsA6Eqdxp85c+Zk3bp1mTVrViZPnpxp06at95jLL788zzzzTLdsEABgc+P8BQB0pU7jz4MPPpj99tsvSTJs2LAsWrToJffffvvtaWhoyIc+9KHu2SEAwGbG+QsA6Eo9OnvA6tWr09TU1HG7sbExra2t6dGjR5YsWZKf/vSnueKKK3L11Ve/ohdsbGxIv359XvuON7r2Ft22Nusz7/qZeb3Mu17mXS/zfmPr6vPXC2s4g5XCvOtl3vUz83qZd7021bw7jT9NTU1Zs2ZNx+329vb06PHC02699dY89dRTmThxYp544on07NkzgwYN2ujfQrW1VVm1am0XbH19/fr16ba1WZ9518/M62Xe9TLvenXnvAcM6Nst625Ouvr8lTiDlcS862Xe9TPzepl3vTbVGazT+DN8+PDceeedOfjggzN//vwMGTKk476zzjqr489XXnlltt12W5cfAwC8Ts5fAEBX6jT+jBkzJs3NzRk/fnyqqsrFF1+cGTNmZPDgwdl///3r2CMAwGbF+QsA6EoNVVVVdb5gS0ubS44LYd71M/N6mXe9zLtePva1+XEGK4d518u862fm9TLvem2qM1in/9oXAAAAAG9e4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAUDDxBwAAAKBg4g8AAABAwcQfAAAAgIKJPwAAAAAFE38AAAAACib+AAAAABRM/AEAAAAomPgDAAAAULAenT2gvb09F1xwQR555JFsueWWueiii/Kud72r4/7rr78+P/vZz5IkH/7wh3Pqqad2324BADYDzl8AQFfq9MqfOXPmZN26dZk1a1YmT56cadOmddz3+OOP5yc/+UluvPHGzJo1K/PmzcvixYu7dcMAAKVz/gIAulKnV/48+OCD2W+//ZIkw4YNy6JFizru+4d/+Id8+9vfTmNjY5KktbU1b3nLWza6XmNjQ/r16/N69ryRtbfotrVZn3nXz8zrZd71Mu96mfcbW1efvxJnsJKYd73Mu35mXi/zrtemmnen8Wf16tVpamrquN3Y2JjW1tb06NEjPXv2TP/+/VNVVS699NLsuuuuefe7373R9draqqxatfb17/xl9OvXp9vWZn3mXT8zr5d518u869Wd8x4woG+3rLs56erzV+IMVhLzrpd518/M62Xe9dpUZ7BOP/bV1NSUNWvWdNxub29Pjx7/vxk9//zzOfPMM7NmzZqcf/75r3OrAAA4fwEAXanT+DN8+PDcc889SZL58+dnyJAhHfdVVZWTTz45Q4cOzdSpUzsuPwYA4LVz/gIAulKnH/saM2ZMmpubM378+FRVlYsvvjgzZszI4MGD097enl//+tdZt25dfvnLXyZJzjjjjOy1117dvnEAgFI5fwEAXamhqqqqzhdsaWnzefNCmHf9zLxe5l0v866X7/zZ/DiDlcO862Xe9TPzepl3vd6w3/kDAAAAwJuX+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAABQMPEHAAAAoGDiDwAAAEDBxB8AAACAgok/AAAAAAUTfwAAAAAKJv4AAAAAFEz8AQAAACiY+AMAAP+vvXsLbfL+4zj+adPGQxsUD1gVAttcxaGlrV6IRSfodKATbNdEMoKChRYvBCceL7QIihNk4AFH2VQmTKwMhAluqBMruikW6wGqYYVVFGmrs7aJJTHmt6sF+vdP0i7t8zTP3q+rJr9YP3wJ5NOvz1MBAHAwlj8AAAAAAAAOxvIHAAAAAADAwVj+AAAAAAAAOBjLHwAAAAAAAAdj+QMAAAAAAOBgaZc/iURCu3btkt/vVzAYVHt7e7/zxsZGVVZWyufz6cqVK8MWFAAA4L+C/gUAAIZSXroXXLp0SbFYTGfOnFFLS4v279+vY8eOSZK6urp06tQp/fjjj4pGowoEAqqoqJDb7R724AAAAE5F/wIAAEMp7ZU/zc3NWrhwoSSptLRUDx48SJ7du3dPZWVlcrvd8ng88nq9evjw4fClBQAA+A+gfwEAgKGU9sqfcDiswsLC5GOXy6V4PK68vDyFw2F5PJ7kWUFBgcLhcMrvl5/v0uTJnpSvycRwfm+8i3lbj5lbi3lbi3lbi3mPXEPdvyQ6mNMwb2sxb+sxc2sxb2vZMe+0V/4UFhYqEokkHycSCeXl5f3fs0gk0q+MAAAAYPDoXwAAYCilXf6Ul5erqalJktTS0qLi4uLkWUlJiZqbmxWNRtXb26u2trZ+5wAAABg8+hcAABhKOcYYk+oFiURC9fX1CoVCMsZo3759ampqktfr1ZIlS9TY2KgzZ87IGKPa2lotX77cquwAAACORP8CAABDKe3yBwAAAAAAANkr7W1fAAAAAAAAyF4sfwAAAAAAAByM5Q8AAAAAAICDZeXyJ5FIaNeuXfL7/QoGg2pvb+933tjYqMrKSvl8Pl25csWmlM6Rbt4nT55UdXW1qqurdeTIEZtSOke6ef/zmpqaGp0+fdqGhM6Sbt5Xr16Vz+eTz+dTfX29+DVpmUk37++++06VlZWqqqrSxYsXbUrpPHfv3lUwGHzn+V9//VVVVVXy+/1qbGy0IRmyCf3LenQwa9HBrEUHsxYdzB4jqoOZLPTLL7+Ybdu2GWOMuXPnjqmrq0uedXZ2mpUrV5poNGp6enqSX+PfSzXvx48fm9WrV5t4PG7evn1r/H6/aW1ttSuqI6Sa9z8OHjxoPv/8c/PDDz9YHc9xUs27t7fXrFixwrx48cIYY0xDQ0Pya/w7qeb96tUr8/HHH5toNGq6u7vN4sWL7YrpKA0NDWblypWmurq63/OxWMwsXbrUdHd3m2g0aiorK01nZ6dNKZEN6F/Wo4NZiw5mLTqYtehg1htpHSwrr/xpbm7WwoULJUmlpaV68OBB8uzevXsqKyuT2+2Wx+OR1+vVw4cP7YrqCKnmXVRUpG+//VYul0u5ubmKx+MaNWqUXVEdIdW8Jennn39WTk6OFi1aZEc8x0k17zt37qi4uFhfffWVAoGAJk2apAkTJtgV1RFSzXvMmDGaNm2a+vr61NfXp5ycHLtiOorX69Xhw4ffeb6trU1er1fjxo2T2+3W3Llzdfv2bRsSIlvQv6xHB7MWHcxadDBr0cGsN9I6WN6w/w3DIBwOq7CwMPnY5XIpHo8rLy9P4XBYHo8neVZQUKBwOGxHTMdINe/8/HxNmDBBxhgdOHBAH330kd577z0b02a/VPMOhUI6f/68Dh06pKNHj9qY0jlSzfvly5e6efOmzp07p7Fjx+qLL75QaWkp7/EMpJq3JE2dOlUrVqzQ27dvVVtba1dMR1m+fLmePHnyzvN8XmKw6F/Wo4NZiw5mLTqYtehg1htpHSwrlz+FhYWKRCLJx4lEIvmm/d+zSCTSb7AYvFTzlqRoNKqdO3eqoKBAu3fvtiOio6Sa97lz59TR0aG1a9fq6dOnys/P1/Tp0/kXqAykmvf48eM1Z84cTZ48WZI0b948tba2UjwykGreTU1N6uzs1OXLlyVJ69evV3l5uUpKSmzJ6nR8XmKw6F/Wo4NZiw5mLTqYtehgI4ddn5lZedtXeXm5mpqaJEktLS0qLi5OnpWUlKi5uVnRaFS9vb1qa2vrd47BSzVvY4w2bNigmTNnas+ePXK5XHbFdIxU8966davOnj2rU6dOafXq1Vq3bh2lI0Op5j179myFQiH99ddfisfjunv3rmbMmGFXVEdINe9x48Zp9OjRcrvdGjVqlDwej3p6euyK6ngffPCB2tvb1d3drVgsptu3b6usrMzuWBjB6F/Wo4NZiw5mLTqYtehgI4ddHSwrr/z55JNPdP36da1Zs0bGGO3bt08nTpyQ1+vVkiVLFAwGFQgEZIzRpk2buP85Q6nmnUgkdOvWLcViMV27dk2S9OWXX/IDRAbSvb8xtNLNe/PmzaqpqZEkffrpp/wwk6F0875x44Z8Pp9yc3NVXl6uiooKuyM7zk8//aTXr1/L7/dr+/btWr9+vYwxqqqq0pQpU+yOhxGM/mU9Opi16GDWooNZiw5mP7s7WI4x/J95AAAAAAAATpWVt30BAAAAAABgYFj+AAAAAAAAOBjLHwAAAAAAAAdj+QMAAAAAAOBgLH8AAAAAAAAcjOUPgIxFo1GdPXt2UH/m4sWL6ujoGKZEAAAAzkcHAzBQLH8AZKyrq2vQxeP7779XOBwepkQAAADORwcDMFAsfwBk7JtvvtEff/yhI0eOaOPGjQoGgwoGg3r06JGePXumZcuWqbOzU7/99psCgYAuXbqk1tZWbdu2TbFYzO74AAAAWYkOBmCg8uwOACD71dXVKRQKqa+vT/Pnz1cgENCff/6pHTt26PTp09qyZYu2b9+u58+fq6GhQUVFRZo1a5bq6+vldrvtjg8AAJCV6GAABorlD4AhEwqF9Pvvv+vChQuSpJ6eHknS0qVL9fXXX2vBggUqKiqyMyIAAIDj0MEApMPyB0DGcnNzlUgk9P7772vVqlX67LPP9OLFi+Q96MePH1dFRYXu37+vlpYWlZaWKicnR8YYm5MDAABkLzoYgIHid/4AyNjEiRP15s0bRSIRXbhwQcFgUDU1Nfrwww91//59nT9/Xlu2bNHevXu1c+dO9fb2qqysTFu3blV3d7fd8QEAALISHQzAQOUY1r4AAAAAAACOxZU/AAAAAAAADsbyBwAAAAAAwMFY/gAAAAAAADgYyx8AAAAAAAAHY/kDAAAAAADgYCx/AAAAAAAAHIzlDwAAAAAAgIP9DfWtvBdmcEMaAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,(ax1,ax2)=plt.subplots(1,2,figsize=(20,10))\n",
    "word=news[news['label']==1]['text'].str.split().apply(lambda x : [len(i) for i in x])\n",
    "sns.distplot(word.map(lambda x: np.mean(x)),ax=ax1,color='red')\n",
    "ax1.set_title('True text')\n",
    "word=news[news['label']==0]['text'].str.split().apply(lambda x : [len(i) for i in x])\n",
    "sns.distplot(word.map(lambda x: np.mean(x)),ax=ax2,color='green')\n",
    "ax2.set_title('Fake text')\n",
    "fig.suptitle('Average word length in each text')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = news[['label']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = news.iloc[:,:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x,test_x,train_y,test_y = train_test_split(X,Y,test_size=0.3,random_state=42,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_title = train_x['title']\n",
    "x_train_text = train_x['text']\n",
    "x_test_title = test_x['title']\n",
    "x_test_text = test_x['text']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(400001, 100)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#load word embeddings.\n",
    "\n",
    "glove_file = datapath('/Users/luanyang/Downloads/stat software/hw/glove.6B.100d.txt')\n",
    "word2vec_text_file = get_tmpfile(\"/Users/luanyang/Downloads/stat software/hw/glove.6B.100d.word2vec.txt\")\n",
    "glove2word2vec(glove_file, word2vec_text_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this may take a while to load\n",
    "model = KeyedVectors.load_word2vec_format(word2vec_text_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: DeprecationWarning: Call to deprecated `wv` (Attribute will be removed in 4.0.0, use self instead).\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "# ignore the deprecated warning if you get it\n",
    "# wv contains the word vectors/embeddings\n",
    "wv = model.wv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_doc_embedding(doc, embeddings, embed_size, OOV_embed):\n",
    "    doc_list = doc.split()\n",
    "    doc_embed = np.zeros(embed_size)\n",
    "    length = 0\n",
    "    for word in doc_list:\n",
    "        if word in embeddings:\n",
    "            doc_embed = doc_embed + embeddings[word]\n",
    "            length += 1\n",
    "        else:\n",
    "            if word in OOV_embed:\n",
    "                doc_embed = doc_embed + OOV_embed[word]\n",
    "                length += 1\n",
    "            else:\n",
    "                OOV_embed[word] = np.random.rand(embed_size)\n",
    "                doc_embed = doc_embed + OOV_embed[word]\n",
    "                length += 1\n",
    "    doc_embed = doc_embed / length\n",
    "    return doc_embed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train_title_embed = np.vstack([calc_doc_embedding(doc, wv, 100, {}) for doc in x_train_title])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.24294229, -0.13865571,  0.63141257, ..., -0.04777657,\n",
       "         0.31054285,  0.04180857],\n",
       "       [ 0.223445  ,  0.22891751,  0.30734899, ..., -0.0724715 ,\n",
       "         0.47797625, -0.1237925 ],\n",
       "       [-0.27930061,  0.18801113,  0.18826362, ..., -0.0623775 ,\n",
       "         0.30220125, -0.02687812],\n",
       "       ...,\n",
       "       [-0.09352112,  0.09898789,  0.14596244, ..., -0.26375867,\n",
       "         0.19383511, -0.02591312],\n",
       "       [ 0.04740666,  0.12959484,  0.478696  , ..., -0.04931983,\n",
       "         0.37350641,  0.117961  ],\n",
       "       [-0.06745022,  0.05036689,  0.26604945, ..., -0.00675555,\n",
       "         0.30543632, -0.01566178]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train_title_embed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_test_title_embed = np.vstack([calc_doc_embedding(doc, wv, 100, {}) for doc in x_test_title])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:72: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  return f(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration 1, loss = 0.44558010\n",
      "Iteration 2, loss = 0.27785386\n",
      "Iteration 3, loss = 0.23743179\n",
      "Iteration 4, loss = 0.21627125\n",
      "Iteration 5, loss = 0.19245192\n",
      "Iteration 6, loss = 0.15866534\n",
      "Iteration 7, loss = 0.12621527\n",
      "Iteration 8, loss = 0.10335186\n",
      "Iteration 9, loss = 0.08211480\n",
      "Iteration 10, loss = 0.06789201\n",
      "Iteration 11, loss = 0.04961974\n",
      "Iteration 12, loss = 0.03222398\n",
      "Iteration 13, loss = 0.03583181\n",
      "Iteration 14, loss = 0.01929107\n",
      "Iteration 15, loss = 0.02636892\n",
      "Iteration 16, loss = 0.01367708\n",
      "Iteration 17, loss = 0.00512480\n",
      "Iteration 18, loss = 0.00248864\n",
      "Iteration 19, loss = 0.00108772\n",
      "Iteration 20, loss = 0.00068880\n",
      "Iteration 21, loss = 0.00053639\n",
      "Iteration 22, loss = 0.00044821\n",
      "Iteration 23, loss = 0.00038768\n",
      "Iteration 24, loss = 0.00035191\n",
      "Iteration 25, loss = 0.00032761\n",
      "Iteration 26, loss = 0.00030587\n",
      "Iteration 27, loss = 0.00028860\n",
      "Iteration 28, loss = 0.00027740\n",
      "Iteration 29, loss = 0.00026859\n",
      "Iteration 30, loss = 0.00026047\n",
      "Iteration 31, loss = 0.00025496\n",
      "Iteration 32, loss = 0.00024990\n",
      "Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['1', '1', '1', '1'], dtype='<U1')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = MLPClassifier(hidden_layer_sizes=(200,200,200,200), max_iter=500,verbose=True)\n",
    "clf.fit(x_train_title_embed, train_y)\n",
    "clf.predict(x_test_embed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1', '1', '1', ..., '1', '0', '0'], dtype='<U1')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(x_test_title_embed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_title = clf.predict(x_test_title_embed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 722,  123],\n",
       "       [  87, 1295]])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "mat = confusion_matrix(test_y, y_pred_title)\n",
    "mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(25.0, 0.5, 'predicted label')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5))\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False)\n",
    "plt.xlabel('true label')\n",
    "plt.ylabel('predicted label')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "macroaveraged F1:  0.8990175332527206\n",
      "microaveraged F1:  0.9057027391109115\n"
     ]
    }
   ],
   "source": [
    "macro_F1 = f1_score(test_y, y_pred_title, average='macro')\n",
    "micro_F1 = f1_score(test_y, y_pred_title, average='micro')\n",
    "print('macroaveraged F1: ', macro_F1)\n",
    "print('microaveraged F1: ', micro_F1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Negative values in data passed to MultinomialNB (input X)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-57-9ae99cbffc0d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Multinomial Naive Bayes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mMultinomialNB\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train_title_embed\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/naive_bayes.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    639\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_init_counters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_effective_classes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 641\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    642\u001b[0m         \u001b[0malpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_alpha\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    643\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_feature_log_prob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/naive_bayes.py\u001b[0m in \u001b[0;36m_count\u001b[0;34m(self, X, Y)\u001b[0m\n\u001b[1;32m    761\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    762\u001b[0m         \u001b[0;34m\"\"\"Count and smooth feature occurrences.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 763\u001b[0;31m         \u001b[0mcheck_non_negative\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"MultinomialNB (input X)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    764\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_count_\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    765\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclass_count_\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_non_negative\u001b[0;34m(X, whom)\u001b[0m\n\u001b[1;32m   1044\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1045\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mX_min\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1046\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Negative values in data passed to %s\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mwhom\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1047\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1048\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Negative values in data passed to MultinomialNB (input X)"
     ]
    }
   ],
   "source": [
    "#Multinomial Naive Bayes \n",
    "clf = MultinomialNB().fit(x_train_title_embed,train_y.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5195, 4)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5195, 1)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2227"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2227"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
